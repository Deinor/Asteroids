import math
from pyglet.window import key
from pyglet import sprite
from . import physycalobjects, resources

class Player (physycalobjects.PhysycalObjects):
    """
    Class defining player sprite and behaviour, user imput.
    """
    def __init__(self, *args, **kwargs):
        super().__init__(img=resources.player_image, *args, **kwargs)

        #Set up player engine flame sprite
        self.engine_sprite = sprite.Sprite(img=resources.engine_flame_image, *args, **kwargs)
        self.engine_sprite.scale = 1.5
        self.engine_sprite.visible = False

        # Constants
        self.thrust = 100
        self.rotate_speed = 100
        self.laser_speed = 500

        #Game starts to recognise key handlers
        self.key_handler = key.KeyStateHandler()

    def update(self, dt):
        super ().update(dt)

        """
        Updating player sprite position based on user keyboard imputs.
        """
        if self.key_handler[key.LEFT]:
            self.rotation += -self.rotate_speed * dt
        if self.key_handler[key.RIGHT]:
            self.rotation += +self.rotate_speed * dt
        if self.key_handler[key.DOWN]:
            #Change of angle based on imput
            angle_in_rad = math.radians(self.rotation)
            #Speed increment generated by user imput
            speed_increment_x = math.sin(angle_in_rad) * self.thrust * dt
            speed_increment_y = math.cos(angle_in_rad) * self.thrust * dt
            #Update actual speed
            self.speed_x -= speed_increment_x
            self.speed_y -= speed_increment_y
        if self.key_handler[key.UP]:
            #Change of angle based on imput
            angle_in_rad = math.radians(self.rotation)
            #Speed increment generated by user imput
            speed_increment_x = math.sin(angle_in_rad) * self.thrust * dt
            speed_increment_y = math.cos(angle_in_rad) * self.thrust * dt
            #Update actual speed
            self.speed_x += speed_increment_x
            self.speed_y += speed_increment_y
            #Update position of player engine sprite; only active when thrusting forward
            self.engine_sprite.rotation = self.rotation
            self.engine_sprite.x = self.x
            self.engine_sprite.y = self.y  
            #Set up engine flame
            self.engine_sprite.visible = True      
        else:
            self.engine_sprite.visible = False
            

    def delete(self):
        """
        Delete the player instance and player engine sprite
        """
        self.engine_sprite.delete()
        super(Player, self).delete()
        


